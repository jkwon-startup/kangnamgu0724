title: "Python 3.10 기초 강의"
description: "Python 3.10의 새로운 기능과 기본 문법을 학습하는 강의입니다."
author: "강의안 제작자"
created_at: "2024-01-15"
tags:
  - "Python"
  - "기초"
  - "프로그래밍"
  - "Python 3.10"

slides:
  - title: "Python 3.10 기초 강의"
    content: |
      # Python 3.10의 세계에 오신 것을 환영합니다!
      
      ## 강의 목표
      - Python 3.10의 새로운 기능 이해
      - 기본 문법 및 데이터 타입 학습
      - 실제 예제를 통한 실습
      
      ## 준비물
      - Python 3.10 설치
      - 코드 에디터 (VSCode, PyCharm 등)
      - 학습 의지 💪
    note: "강의 시작 전 Python 3.10이 설치되어 있는지 확인해주세요."

  - title: "Python 3.10의 새로운 기능"
    content: |
      ## Match-Case 문 (Structural Pattern Matching)
      
      ```python
      def describe_animal(animal):
          match animal:
              case "dog":
                  return "충성스러운 친구"
              case "cat":
                  return "독립적인 동반자"
              case "bird":
                  return "자유로운 영혼"
              case _:
                  return "알 수 없는 동물"
      ```
      
      ## 더 나은 에러 메시지
      - 구문 오류 메시지가 더 명확해졌습니다
      - 누락된 괄호나 콜론을 정확히 지적합니다
    note: "Match-Case는 Python 3.10에서 새로 추가된 매우 강력한 기능입니다."

  - title: "변수와 데이터 타입"
    content: |
      ## 기본 데이터 타입
      
      ```python
      # 숫자
      age = 25
      height = 175.5
      
      # 문자열
      name = "홍길동"
      message = f"안녕하세요, {name}님!"
      
      # 불리언
      is_student = True
      is_graduated = False
      
      # 리스트
      fruits = ["사과", "바나나", "오렌지"]
      
      # 딕셔너리
      person = {
          "name": "홍길동",
          "age": 25,
          "city": "서울"
      }
      ```
    note: "Python은 동적 타이핑을 지원하므로 변수의 타입을 명시적으로 선언할 필요가 없습니다."

  - title: "제어 구조"
    content: |
      ## 조건문 (if-elif-else)
      
      ```python
      score = 85
      
      if score >= 90:
          grade = "A"
      elif score >= 80:
          grade = "B"
      elif score >= 70:
          grade = "C"
      else:
          grade = "F"
      
      print(f"당신의 성적은 {grade}입니다.")
      ```
      
      ## 반복문 (for, while)
      
      ```python
      # for 반복문
      for i in range(5):
          print(f"반복 {i+1}")
      
      # while 반복문
      count = 0
      while count < 3:
          print("Hello!")
          count += 1
      ```
    note: "Python의 들여쓰기는 코드 블록을 구분하는 중요한 요소입니다."

  - title: "함수 정의"
    content: |
      ## 함수 기본 구조
      
      ```python
      def greet(name, age=20):
          """인사말을 출력하는 함수"""
          return f"안녕하세요, {age}세 {name}님!"
      
      # 함수 호출
      message = greet("김철수", 25)
      print(message)
      
      # 기본값 사용
      message2 = greet("이영희")
      print(message2)
      ```
      
      ## 람다 함수
      
      ```python
      # 람다 함수
      square = lambda x: x ** 2
      print(square(5))  # 25
      
      # 리스트와 함께 사용
      numbers = [1, 2, 3, 4, 5]
      squared = list(map(lambda x: x ** 2, numbers))
      print(squared)  # [1, 4, 9, 16, 25]
      ```
    note: "함수는 코드의 재사용성을 높이고 프로그램을 모듈화하는 핵심 요소입니다."

  - title: "실습 예제"
    content: |
      ## 간단한 계산기 만들기
      
      ```python
      def calculator():
          print("=== 간단한 계산기 ===")
          
          while True:
              try:
                  num1 = float(input("첫 번째 숫자: "))
                  operator = input("연산자 (+, -, *, /): ")
                  num2 = float(input("두 번째 숫자: "))
                  
                  match operator:
                      case "+":
                          result = num1 + num2
                      case "-":
                          result = num1 - num2
                      case "*":
                          result = num1 * num2
                      case "/":
                          if num2 != 0:
                              result = num1 / num2
                          else:
                              print("0으로 나눌 수 없습니다!")
                              continue
                      case _:
                          print("잘못된 연산자입니다!")
                          continue
                  
                  print(f"결과: {result}")
                  
                  if input("계속하시겠습니까? (y/n): ").lower() != 'y':
                      break
                      
              except ValueError:
                  print("올바른 숫자를 입력해주세요!")
      
      # 실행
      calculator()
      ```
    note: "이 예제는 지금까지 학습한 내용을 종합적으로 활용한 것입니다."

  - title: "다음 단계"
    content: |
      ## 추가 학습 주제
      
      ### 객체 지향 프로그래밍
      - 클래스와 객체
      - 상속과 다형성
      - 캡슐화와 추상화
      
      ### 고급 기능
      - 데코레이터
      - 컨텍스트 매니저
      - 제너레이터
      
      ### 라이브러리 활용
      - NumPy (수치 계산)
      - Pandas (데이터 분석)
      - Flask/Django (웹 개발)
      
      ## 추천 자료
      - [Python 공식 문서](https://docs.python.org/3.10/)
      - [Python 튜토리얼](https://docs.python.org/3.10/tutorial/)
      - 실습 프로젝트 수행
    note: "지속적인 실습과 프로젝트를 통해 Python 실력을 향상시킬 수 있습니다."

  - title: "마무리"
    content: |
      # 수고하셨습니다! 🎉
      
      ## 오늘 학습한 내용
      - ✅ Python 3.10의 새로운 기능
      - ✅ 기본 데이터 타입과 변수
      - ✅ 제어 구조 (조건문, 반복문)
      - ✅ 함수 정의와 사용
      - ✅ 실습 예제 (계산기)
      
      ## 다음 강의 예고
      - 객체 지향 프로그래밍
      - 파일 입출력
      - 예외 처리
      - 모듈과 패키지
      
      ## 질문이 있으시면 언제든지 문의해주세요!
      
      **Happy Coding! 🐍**
    note: "강의 종료 후 복습을 통해 학습 효과를 높일 수 있습니다." 